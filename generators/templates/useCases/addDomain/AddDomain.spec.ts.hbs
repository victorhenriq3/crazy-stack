import MockDate from "mockdate";

import { fake{{pascalCase name}}Entity } from "@/slices/{{camellCase name}}/entities/{{pascalCase name}}Entity.spec";
import { Add{{pascalCase name}}Repository } from "@/slices/{{camellCase name}}/repositories";
import { mock, MockProxy } from "jest-mock-extended";
import { {{pascalCase name}}Entity } from "../../entities";
import { add{{pascalCase name}} } from "./AddDomain";

describe("add{{pascalCase name}}", () => {
  let testInstance: ({{camellCase name}}: {{pascalCase name}}Entity) => Promise<{{pascalCase name}}Entity | null>;
  let add{{pascalCase name}}Repository: MockProxy<Add{{pascalCase name}}Repository>;

    beforeAll(async () => {
      MockDate.set(new Date());
      add{{pascalCase name}}Repository = mock();
      add{{pascalCase name}}Repository.add{{pascalCase name}}.mockResolvedValue(fake{{pascalCase name}}Entity);
    });

    beforeEach(() => {
      testInstance = add{{pascalCase name}}(add{{pascalCase name}}Repository);
    });

    afterAll(async () => {
      MockDate.reset();
    });

    it('should call add{{pascalCase name}} of Add{{pascalCase name}}Repository with correct value', async () => {
      await testInstance(fake{{pascalCase name}}Entity);
      expect(add{{pascalCase name}}Repository.add{{pascalCase name}})
        .toHaveBeenCalledWith(new {{pascalCase name}}Entity(fake{{pascalCase name}}Entity));
      expect(add{{pascalCase name}}Repository.add{{pascalCase name}}).toHaveBeenCalledTimes(1);
    })

    it("should return a new {{camellCase name}} created when add{{pascalCase name}}Repository insert it", async () => {
      const {{camellCase name}} = await testInstance(fake{{pascalCase name}}Entity);
      expect({{camellCase name}}).toEqual(fake{{pascalCase name}}Entity);
    })

    it("should return null when add{{pascalCase name}}Repository insert null", async () => {
      add{{pascalCase name}}Repository.add{{pascalCase name}}.mockResolvedValue(null);
      const {{camellCase name}} = await testInstance(fake{{pascalCase name}}Entity);
      expect({{camellCase name}}).toBeNull();
    })

    it("should rethrow if add{{pascalCase name}} of Add{{pascalCase name}} throws", async () => {
      add{{pascalCase name}}Repository.add{{pascalCase name}}.mockRejectedValue(new Error("any_error"));
      await expect(testInstance(fake{{pascalCase name}}Entity)).rejects.toThrow("any_error");
    })
})